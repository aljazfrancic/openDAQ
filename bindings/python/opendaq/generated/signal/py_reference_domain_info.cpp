//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     RTGen (PythonGenerator).
// </auto-generated>
//------------------------------------------------------------------------------

/*
 * Copyright 2022-2024 openDAQ d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "py_opendaq/py_opendaq.h"
#include "py_core_types/py_converter.h"


PyDaqIntf<daq::IReferenceDomainInfo, daq::IBaseObject> declareIReferenceDomainInfo(pybind11::module_ m)
{
    return wrapInterface<daq::IReferenceDomainInfo, daq::IBaseObject>(m, "IReferenceDomainInfo");
}

void defineIReferenceDomainInfo(pybind11::module_ m, PyDaqIntf<daq::IReferenceDomainInfo, daq::IBaseObject> cls)
{
    cls.doc() = "TODO brief";

    m.def("ReferenceDomainInfoFromBuilder", &daq::ReferenceDomainInfoFromBuilder_Create);

    cls.def_property_readonly("reference_domain_id",
        [](daq::IReferenceDomainInfo *object)
        {
            const auto objectPtr = daq::ReferenceDomainInfoPtr::Borrow(object);
            return objectPtr.getReferenceDomainId().toStdString();
        },
        "Gets the Reference Domain ID.");
    cls.def_property_readonly("reference_domain_offset",
        [](daq::IReferenceDomainInfo *object)
        {
            const auto objectPtr = daq::ReferenceDomainInfoPtr::Borrow(object);
            return objectPtr.getReferenceDomainOffset().detach();
        },
        py::return_value_policy::take_ownership,
        "Gets the Reference Domain Offset.");
    cls.def_property_readonly("reference_domain_is_absolute",
        [](daq::IReferenceDomainInfo *object)
        {
            const auto objectPtr = daq::ReferenceDomainInfoPtr::Borrow(object);
            return objectPtr.getReferenceDomainIsAbsolute().detach();
        },
        py::return_value_policy::take_ownership,
        "Gets the flag that indicates if the Reference Domain Is Absolute.");
}
